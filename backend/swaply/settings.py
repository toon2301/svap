"""
Django settings for swaply project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file (if it exists)
env_path = BASE_DIR / '.env'
if env_path.exists():
    load_dotenv(env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Helpers
def env_bool(name: str, default: bool = False) -> bool:
    value = os.getenv(name, str(default))
    return value.lower() in {"1", "true", "yes", "on"}

# SECURITY
# DEBUG from env (default True for local/dev). MUST be False in production.
DEBUG = env_bool('DEBUG', True)

# SECRET_KEY from env; in production it must be explicitly provided
SECRET_KEY = os.getenv('SECRET_KEY') or ('dev-secret-key' if DEBUG else None)
if not SECRET_KEY:
    raise ValueError('SECRET_KEY must be set when DEBUG is False')

# ALLOWED_HOSTS - nastavte v .env súbore pre produkciu
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,AntonChudjak.pythonanywhere.com').split(',')

# Automaticky pridaj host pre Railway podľa BACKEND_ORIGIN alebo Railway env
_backend_origin = os.getenv('BACKEND_ORIGIN', '')
if _backend_origin:
    try:
        parsed_backend = urlparse(_backend_origin)
        if parsed_backend.hostname and parsed_backend.hostname not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(parsed_backend.hostname)
    except Exception:
        pass

# Pri detekcii Railway prostredia povoľ aj subdomény railway.app
if os.getenv('RAILWAY_ENVIRONMENT_ID') and '.railway.app' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('.railway.app')


# Pridaj Cloudflare tunnel domény ak sú dostupné - VYPNUTÉ
# if os.getenv('USE_CLOUDFLARE_TUNNEL', 'False').lower() == 'true':
#     ALLOWED_HOSTS.extend(['auth.svaply.com', 'app.svaply.com'])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    
    # Django allauth (len pre Google OAuth) - DOČASNE VYPNUTÉ
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
    
    # Local apps
    'accounts',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'allauth.account.middleware.AccountMiddleware',  # DOČASNE VYPNUTÉ
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'swaply.middleware.SecurityHeadersMiddleware',
    'swaply.middleware.EnforceCSRFMiddleware',
    'swaply.middleware.GlobalErrorHandlingMiddleware',
]

# Cross Origin Opener Policy – None pre kompatibilitu s popupmi len ak je potrebné
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

ROOT_URLCONF = 'swaply.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'swaply.wsgi.application'

# Database
# Prefer DATABASE_URL if provided; fallback to sqlite3
db_url = os.getenv('DATABASE_URL')
if db_url:
    parsed = urlparse(db_url)
    if parsed.scheme in ('postgres', 'postgresql'):
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': parsed.path[1:] or '',
                'USER': parsed.username or '',
                'PASSWORD': parsed.password or '',
                'HOST': parsed.hostname or '',
                'PORT': str(parsed.port or ''),
            }
        }
    elif parsed.scheme == 'sqlite':
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': parsed.path if parsed.path else BASE_DIR / 'db.sqlite3',
            }
        }
    else:
        # Unknown scheme -> fallback to sqlite
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'sk'
TIME_ZONE = 'Europe/Bratislava'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'EXCEPTION_HANDLER': 'swaply.middleware.custom_exception_handler',
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# CORS settings - nastavte v .env súbore pre produkciu (IP adresa pre mobile testovanie)
CORS_ALLOWED_ORIGINS = os.getenv(
    'CORS_ALLOWED_ORIGINS',
    'http://localhost:3000,http://127.0.0.1:3000,http://192.168.68.103:3000'
).split(',')

# Pridaj Cloudflare tunnel domény ak sú dostupné - VYPNUTÉ
# if os.getenv('USE_CLOUDFLARE_TUNNEL', 'False').lower() == 'true':
#     CORS_ALLOWED_ORIGINS.extend(['https://app.svaply.com', 'https://auth.svaply.com'])

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'x-mobile-app',  # Pridané pre mobile detekciu
    'x-device-type',  # Pridané pre mobile detekciu
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_PREFLIGHT_MAX_AGE = 86400

CORS_EXPOSE_HEADERS = [
    'authorization',
    'content-type',
    'x-csrf-token',
]

# CSRF trusted origins
CSRF_TRUSTED_ORIGINS = os.getenv(
    'CSRF_TRUSTED_ORIGINS',
    ','.join(CORS_ALLOWED_ORIGINS)
).split(',')

# Redis settings (pre cache a session storage). Ak REDIS_URL nie je zadaný, použijeme LocMemCache.
REDIS_URL = os.getenv('REDIS_URL', None)

if REDIS_URL:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': REDIS_URL,
            'KEY_PREFIX': os.getenv('CACHE_KEY_PREFIX', 'swaply'),
        }
    }
else:
    # Fallback pre dev/test
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'swaply-cache'
        }
    }

# Cookies a bezpečnosť
SESSION_COOKIE_SECURE = env_bool('SESSION_COOKIE_SECURE', not DEBUG)
CSRF_COOKIE_SECURE = env_bool('CSRF_COOKIE_SECURE', not DEBUG)
SESSION_COOKIE_HTTPONLY = env_bool('SESSION_COOKIE_HTTPONLY', True)
CSRF_COOKIE_HTTPONLY = env_bool('CSRF_COOKIE_HTTPONLY', False)
# Enforce CSRF pre API – v produkcii povoliť vždy; v testoch je možné vypnúť
if DEBUG:
    CSRF_ENFORCE_API = env_bool('CSRF_ENFORCE_API', True) and not ('test' in sys.argv or 'pytest' in sys.modules)
else:
    CSRF_ENFORCE_API = True
SECURE_SSL_REDIRECT = env_bool('SECURE_SSL_REDIRECT', not DEBUG)
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
X_FRAME_OPTIONS = 'DENY'

# Rate limiting toggles
# V testoch vypneme rate limiting
RATE_LIMITING_ENABLED = env_bool('RATE_LIMITING_ENABLED', True) and not ('test' in sys.argv or 'pytest' in sys.modules)
RATE_LIMIT_DISABLED = env_bool('RATE_LIMIT_DISABLED', False) or ('test' in sys.argv or 'pytest' in sys.modules)

# Výnimky/override pre lokálny vývoj (DEBUG)
if DEBUG:
    # Povoliť registráciu bez rate limitu v lokále
    RATE_LIMIT_ALLOW_PATHS = ['/api/auth/register/']
    # Zvýšiť limity pre register ak by allow_paths neboli uplatnené
    RATE_LIMIT_OVERRIDES = {
        'register': {
            'max_attempts': 100,
            'window_minutes': 1,
            'block_minutes': 1,
        }
    }

# CAPTCHA settings
CAPTCHA_ENABLED = env_bool('CAPTCHA_ENABLED', True)
CAPTCHA_SECRET_KEY = os.getenv('CAPTCHA_SECRET_KEY', 'test-secret-key')
CAPTCHA_SITE_KEY = os.getenv('CAPTCHA_SITE_KEY', 'test-site-key')
CAPTCHA_VERIFY_URL = 'https://www.google.com/recaptcha/api/siteverify'
CAPTCHA_SKIP_IN_TESTS = env_bool('CAPTCHA_SKIP_IN_TESTS', True)

# Email settings
# Allow explicit override via env even in DEBUG
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
if not EMAIL_BACKEND:
    # Pre testovanie a vývoj použijeme console backend
    # TODO: Zmeniť na smtp.EmailBackend keď nastavíme SendGrid/Mailgun pre produkciu
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    # if DEBUG or 'test' in sys.argv:
    #     EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    # else:
    #     EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# SMTP defaults if SMTP backend selected
if EMAIL_BACKEND.endswith('smtp.EmailBackend'):
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = env_bool('EMAIL_USE_TLS', True)
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER or 'no-reply@localhost')

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'allauth.account.auth_backends.AuthenticationBackend',  # DOČASNE VYPNUTÉ
]

# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# Sites framework
SITE_ID = int(os.getenv('SITE_ID', '1'))

# Logging configuration pre cloud (Railway)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{"level": "%(levelname)s", "time": "%(asctime)s", "module": "%(module)s", "message": "%(message)s"}',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'audit_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'json',
        },
        'security_console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'swaply': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'accounts': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'audit': {
            'handlers': ['audit_console'],
            'level': 'INFO',
            'propagate': False,
        },
        'security': {
            'handlers': ['security_console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# On Railway/containers: log to stdout instead of files to avoid FS errors
if os.getenv('RAILWAY_ENVIRONMENT_ID') or os.getenv('LOG_TO_STDOUT', '0') == '1':
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
            'json': {
                'format': '{"level": "%(levelname)s", "time": "%(asctime)s", "module": "%(module)s", "message": "%(message)s"}',
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
            'console_json': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'json',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'swaply': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'accounts': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'audit': {
                'handlers': ['console_json'],
                'level': 'INFO',
                'propagate': False,
            },
            'security': {
                'handlers': ['console_json'],
                'level': 'WARNING',
                'propagate': False,
            },
        },
    }


# Monitoring bezpečnostných udalostí (feature flag)
AUDIT_LOGGING_ENABLED = env_bool('AUDIT_LOGGING_ENABLED', True)

# Account lockout feature flag (v testoch vypnuté)
ACCOUNT_LOCKOUT_ENABLED = env_bool('ACCOUNT_LOCKOUT_ENABLED', True)

# Django allauth settings
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USERNAME_BLACKLIST = []

# Social account settings
SOCIALACCOUNT_EMAIL_VERIFICATION = False
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_AUTO_SIGNUP = True

# Google OAuth settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

# Google OAuth credentials (treba nastaviť v .env súbore)
GOOGLE_OAUTH2_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID', '')
GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_OAUTH2_SECRET', '')

# OAuth Callback URLs - nastavte v .env súbore pre produkciu (IP adresa pre mobile testovanie)
FRONTEND_CALLBACK_URL = os.getenv('FRONTEND_CALLBACK_URL', 'http://localhost:3000/auth/callback/')
BACKEND_CALLBACK_URL = os.getenv('BACKEND_CALLBACK_URL', 'http://localhost:8000/api/oauth/google/callback/')

# Frontend URL pre CORS - používa IP adresu pre mobile testovanie
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://192.168.68.103:3000')

# Cloudflare Tunnel URLs (pre development s tunnel) - VYPNUTÉ
# if os.getenv('USE_CLOUDFLARE_TUNNEL', 'False').lower() == 'true':
#     FRONTEND_CALLBACK_URL = 'https://app.svaply.com/auth/callback/'
#     BACKEND_CALLBACK_URL = 'https://auth.svaply.com/api/oauth/google/callback/'
#     FRONTEND_URL = 'https://app.svaply.com'

# Email templates pre allauth
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Swaply] '
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# Password reset settings
ACCOUNT_PASSWORD_RESET_TOKEN_GENERATOR = 'allauth.account.utils.default_token_generator'
ACCOUNT_PASSWORD_RESET_TOKEN_EXPIRE_DAYS = 1

# Email templates - použij Django allauth predvolené
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/dashboard/'

# Frontend URL pre allauth redirecty
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'